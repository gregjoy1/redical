name: Build Release

on:
  # This workflow is run each time a tag is pushed.
  push:
    # For testing...
    branches:
      - "feature/setup-github-actions"

    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Specify the version to build the release for.'
        required: true
        default: ''

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag or workflow dispatch
        shell: bash
        # run: |
        #   if [[ "${{ github.event.inputs.release_version }}" != "" ]]; then
        #     echo "VERSION=${github.event.inputs.release_version}" >> $GITHUB_ENV
        #   else
        #     echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        #   fi
        run: echo "VERSION=$}git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="libredical"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"

          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.dylib" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name.so" "$dirname"
          fi

          tar -czf "$dirname.tar.gz" "$dirname"
          echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
